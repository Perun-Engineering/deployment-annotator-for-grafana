name: Release

on:
  release:
    types: [published]
  workflow_dispatch: # Allow manual triggering
    inputs:
      release_tag:
        description: "Release tag to build for (e.g., v1.0.3)"
        required: false
        type: string

env:
  REGISTRY: ghcr.io

jobs:
  # Build and publish multi-arch images on release
  build-and-publish:
    name: Build & Publish Multi-Arch Images
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Set environment variables
        env:
          REPOSITORY: ${{ github.repository }}
        run: |
          echo "IMAGE_NAME=$(echo "$REPOSITORY" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Get release version
        id: version
        env:
          EVENT_NAME: ${{ github.event_name }}
          RELEASE_TAG_NAME: ${{ github.event.release.tag_name }}
          INPUT_RELEASE_TAG: ${{ github.event.inputs.release_tag }}
          REPOSITORY: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "$EVENT_NAME" = "release" ]; then
            # Release event - use release data
            VERSION="$RELEASE_TAG_NAME"
            TAG_NAME="$RELEASE_TAG_NAME"
          elif [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            # Manual trigger - use input or latest release
            if [ -n "$INPUT_RELEASE_TAG" ]; then
              TAG_NAME="$INPUT_RELEASE_TAG"
              VERSION="$INPUT_RELEASE_TAG"
            else
              # Get latest release
              TAG_NAME=$(gh release list --repo "$REPOSITORY" --limit 1 --json tagName --jq '.[0].tagName')
              VERSION="$TAG_NAME"
            fi
          else
            echo "Unsupported event type: $EVENT_NAME"
            exit 1
          fi

          # Remove 'v' prefix if present
          VERSION=${VERSION#v}

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

          echo "Detected version: $VERSION"
          echo "Detected tag: $TAG_NAME"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=Deployment Annotator for Grafana
            org.opencontainers.image.description=Kubernetes Controller for creating Grafana deployment annotations
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

      - name: Build and push multi-arch Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            REVISION=${{ github.sha }}
            BUILDTIME=${{ github.event.release.published_at }}

      - name: Inspect multi-arch image
        env:
          IMAGE_TAG: ${{ steps.version.outputs.version }}
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM to release
        env:
          TAG_NAME: ${{ steps.version.outputs.tag_name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "$TAG_NAME" sbom.spdx.json --clobber

  # Package and publish Helm chart
  package-helm:
    name: Package & Publish Helm Chart
    runs-on: ubuntu-latest
    needs: build-and-publish
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Set environment variables
        env:
          REPOSITORY: ${{ github.repository }}
        run: |
          echo "IMAGE_NAME=$(echo "$REPOSITORY" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Get release version
        id: version
        env:
          EVENT_NAME: ${{ github.event_name }}
          RELEASE_TAG_NAME: ${{ github.event.release.tag_name }}
          INPUT_RELEASE_TAG: ${{ github.event.inputs.release_tag }}
          REPOSITORY: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "$EVENT_NAME" = "release" ]; then
            VERSION="$RELEASE_TAG_NAME"
            TAG_NAME="$RELEASE_TAG_NAME"
          elif [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            if [ -n "$INPUT_RELEASE_TAG" ]; then
              TAG_NAME="$INPUT_RELEASE_TAG"
              VERSION="$INPUT_RELEASE_TAG"
            else
              TAG_NAME=$(gh release list --repo "$REPOSITORY" --limit 1 --json tagName --jq '.[0].tagName')
              VERSION="$TAG_NAME"
            fi
          fi
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: "3.18.3"

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Helm chart image tag
        env:
          RELEASE_VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Update the default image tag in values.yaml to match the release version
          sed -i "s/tag: \"latest\"/tag: \"$RELEASE_VERSION\"/" helm/deployment-annotator-controller/values.yaml

          # Update appVersion in Chart.yaml to match the release version
          sed -i "s/appVersion: \"[^\"]*\"/appVersion: \"$RELEASE_VERSION\"/" helm/deployment-annotator-controller/Chart.yaml

          # Verify the changes
          echo "Updated values.yaml image tag:"
          grep -A 3 "image:" helm/deployment-annotator-controller/values.yaml
          echo ""
          echo "Updated Chart.yaml appVersion:"
          grep "appVersion:" helm/deployment-annotator-controller/Chart.yaml

      - name: Verify chart version
        env:
          RELEASE_VERSION: ${{ steps.version.outputs.version }}
        run: |
          CHART_VERSION=$(grep '^version:' helm/deployment-annotator-controller/Chart.yaml | cut -d' ' -f2)
          if [ "$CHART_VERSION" != "$RELEASE_VERSION" ]; then
            echo "Chart version ($CHART_VERSION) doesn't match release version ($RELEASE_VERSION)"
            echo "This should have been updated by semantic-release"
            exit 1
          fi

      - name: Package Helm chart
        run: |
          helm package helm/deployment-annotator-controller --destination .

      - name: Push Helm chart to OCI registry
        env:
          CHART_VERSION: ${{ steps.version.outputs.version }}
        run: |
          helm push deployment-annotator-controller-${CHART_VERSION}.tgz oci://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/helm

      - name: Upload Helm chart to release
        env:
          TAG_NAME: ${{ steps.version.outputs.tag_name }}
          CHART_VERSION: ${{ steps.version.outputs.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "$TAG_NAME" \
            deployment-annotator-controller-${CHART_VERSION}.tgz --clobber

  # Security scan of released image
  security-scan:
    name: Security Scan Released Image
    runs-on: ubuntu-latest
    needs: build-and-publish
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Set environment variables
        env:
          REPOSITORY: ${{ github.repository }}
        run: |
          echo "IMAGE_NAME=$(echo "$REPOSITORY" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Get release version
        id: version
        env:
          EVENT_NAME: ${{ github.event_name }}
          RELEASE_TAG_NAME: ${{ github.event.release.tag_name }}
          INPUT_RELEASE_TAG: ${{ github.event.inputs.release_tag }}
          REPOSITORY: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "$EVENT_NAME" = "release" ]; then
            VERSION="$RELEASE_TAG_NAME"
          elif [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            if [ -n "$INPUT_RELEASE_TAG" ]; then
              VERSION="$INPUT_RELEASE_TAG"
            else
              VERSION=$(gh release list --repo "$REPOSITORY" --limit 1 --json tagName --jq '.[0].tagName')
            fi
          fi
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

  # Summary
  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [build-and-publish, package-helm, security-scan]
    if: always()
    steps:
      - name: Set environment variables
        env:
          REPOSITORY: ${{ github.repository }}
        run: |
          echo "IMAGE_NAME=$(echo "$REPOSITORY" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Get release version
        id: version
        env:
          EVENT_NAME: ${{ github.event_name }}
          RELEASE_TAG_NAME: ${{ github.event.release.tag_name }}
          INPUT_RELEASE_TAG: ${{ github.event.inputs.release_tag }}
          REPOSITORY: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "$EVENT_NAME" = "release" ]; then
            VERSION="$RELEASE_TAG_NAME"
            TAG_NAME="$RELEASE_TAG_NAME"
          elif [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            if [ -n "$INPUT_RELEASE_TAG" ]; then
              TAG_NAME="$INPUT_RELEASE_TAG"
              VERSION="$INPUT_RELEASE_TAG"
            else
              TAG_NAME=$(gh release list --repo "$REPOSITORY" --limit 1 --json tagName --jq '.[0].tagName')
              VERSION="$TAG_NAME"
            fi
          fi
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Release Summary
        run: |
          echo "## Release ${{ steps.version.outputs.tag_name }} Build Complete! 🎉"
          echo ""
          echo "### Artifacts Published:"
          echo "- 🐳 **Multi-Arch Container Images**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
          echo "  - Platforms: linux/amd64, linux/arm64"
          echo "- 📦 **Helm Chart**: oci://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/helm/deployment-annotator-controller"
          echo "- 🔒 **SBOM**: Software Bill of Materials for security compliance"
          echo ""
          echo "### Installation Commands:"
          echo '```bash'
          echo "# Install via Helm (OCI)"
          echo "helm install deployment-annotator-controller oci://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/helm/deployment-annotator-controller \\"
          echo "  --version ${{ steps.version.outputs.version }} \\"
          echo "  --set grafana.url=https://your-grafana.com \\"
          echo "  --set grafana.apiKey=your-api-key"
          echo ""
          echo "# Pull container image"
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
          echo '```'
          echo ""
          echo "### Job Status:"
          echo "- Build & Publish: ${{ needs.build-and-publish.result }}"
          echo "- Package Helm: ${{ needs.package-helm.result }}"
          echo "- Security Scan: ${{ needs.security-scan.result }}"
